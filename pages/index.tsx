import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import {GetServerSidePropsContext} from "next";
import React from "react";

import {Cookie, CookieController} from "@cookie-baker/core";
import {CookieClient, isBrowser, createRealTimeCookie} from "@cookie-baker/browser";
import { createUseCookie } from "@cookie-baker/react";
import { CookieServer } from "@cookie-baker/node";

type CookieModel = {
    ac: string
    adc: string
}

class CookieServerRender implements CookieController<CookieModel>{
    get() {
        return {}
    }
    set() {}
    remove() {}
}
const cookieClient = isBrowser() ? new CookieClient<CookieModel>() : new CookieServerRender
const realTimeCookie = createRealTimeCookie(cookieClient)
const useCookie = createUseCookie(realTimeCookie, cookieClient)
if (isBrowser()) {
    cookieClient.set('ac', 'asdfasdf');
    console.log(cookieClient.get());

    const cookie = new Cookie<{ab: string}>()
    document.cookie = cookie.stringify('ab', '123')
    console.log(cookie.parse(document.cookie));
}

const Home: NextPage = () => {
    const cookie = useCookie()
    React.useEffect(() => {
        console.log('update in react', cookie);
    }, [cookie])
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      Hello
    </div>
  )
}
export const getServerSideProps = async (context: GetServerSidePropsContext) => {
    const cookie = new CookieServer<CookieModel>(context)
    console.log(cookie.get());
    cookie.set('adc', 'asdf')
    return {props: {}}
}


export default Home
